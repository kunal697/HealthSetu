import React, { useState, useRef, useEffect } from "react";
import PrescriptionForm from "./PrescriptionForm";
import PrescriptionPreview from "./PrescriptionPreview";
import html2pdf from "html2pdf.js";
import { uploadPdf, deletePdf } from "../utils/uploadPdf";
import { toast } from 'react-toastify';
import { useNavigate } from "react-router-dom";
import { FaAnglesLeft } from "react-icons/fa6";
import { jwtDecode } from "jwt-decode";

const CreatePrescription = () => {
  const [prescriptionId, setPrescriptionId] = useState(null);
  const navigate = useNavigate();
  const [user, setUser] = useState(null);

  const [prescriptionData, setPrescriptionData] = useState({
    patientName: "",
    age: "",
    sex: "",
    contact: "",
    city: "",
    bmi: "",
    weight: "",
    height: "",
    additionalinfo: "",
    diagnosis: "",
    investigationtest: "",
    medicines: [
      {
        name: "",
        dosage: {
          morning: false,
          afternoon: false,
          evening: false,
          night: false,
          beforeFood: false,
          afterFood: false,
        },
        duration: {
          durationDays: "",
          durationUnit: "day's",
        },
        advice: "",
      },
    ],
    remarks: "",
    followup: "",
    drugAllergies: [],
    otherDrugAllergies: "",
    healthIssues: [],
    otherHealthIssues: "",
  });

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [uploadLoading, setUploadLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [progressMessage, setProgressMessage] = useState("");

  const prescriptionPreviewRef = useRef();

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast.error("Please log in to access this page.");
      navigate("/");
      return;
    }

    try {
      const decodedToken = jwtDecode(token);
      const userData = decodedToken.user;
    
      setUser(userData);
    } catch (error) {
      toast.error("Session expired. Please login again.");
      navigate("/");
    }
  }, [navigate]);

  const generatePrescriptionPDF = () => {
    const element = prescriptionPreviewRef.current;

    const footer = document.createElement("div");
    footer.innerHTML = `
      <p style="font-size: 12px; text-align: center; margin-top: 20px; ">
        <strong>Digital prescription generated by HealthSetu.</strong><br />
        <span>Note: HealthSetu is not responsible for the accuracy or validity of the prescriptions provided by doctors.</span>
        <div style="height:10px"></div>
      </p>
    `;

    element.appendChild(footer);

    const options = {
      filename: "prescription.pdf",
      image: { type: "jpeg", quality: 0.98 },
      html2canvas: {
        scale: 2,
        useCORS: true,
        backgroundColor: "#ffffff",
        logging: false,
        allowTaint: true,
        letterRendering: true,
      },
      jsPDF: {
        unit: "mm",
        format: "a4",
        orientation: "portrait",
        compress: false,
        putOnlyUsedFonts: true,
        floatPrecision: 16,
      },
      margin: [10, 10, 10, 10],
      pagebreak: { mode: ["avoid-all"] },
      enableLinks: true,
      textRendering: true,
    };

    return new Promise((resolve, reject) => {
      html2pdf()
        .from(element)
        .set(options)
        .outputPdf("blob")
        .then((pdfBlob) => {
          element.removeChild(footer);
          resolve(pdfBlob);
        })
        .catch((error) => {
          element.removeChild(footer);
          reject(error);
        });
    });
  };

  const downloadPrescriptionPDF = async () => {
    const element = prescriptionPreviewRef.current;
    const footer = document.createElement("div");
    footer.innerHTML = `
      <p style="font-size: 12px; text-align: center; margin-top: 20px; ">
        <strong>Digital prescription generated by HealthSetu.</strong><br />
        <span>Note: HealthSetu is not responsible for the accuracy or validity of the prescriptions provided by doctors.</span>
        <div style="height:10px"></div>
      </p>
    `;

    element.appendChild(footer);
    await new Promise((resolve) => setTimeout(resolve, 500));
    
    const options = {
      filename: "prescription.pdf",
      image: { type: "jpeg", quality: 0.98 },
      html2canvas: {
        scale: 2,
        useCORS: true,
        backgroundColor: "#ffffff",
        logging: false,
        allowTaint: true,
        letterRendering: true,
      },
      jsPDF: {
        unit: "mm",
        format: "a4",
        orientation: "portrait",
        compress: false,
        putOnlyUsedFonts: true,
        floatPrecision: 16,
      },
      margin: [10, 10, 10, 10],
      pagebreak: { mode: ["avoid-all"] },
      enableLinks: true,
      textRendering: true,
    };

    html2pdf()
      .from(element)
      .set(options)
      .save()
      .finally(() => {
        element.removeChild(footer);
      });
  };

  const handleSubmit = async () => {
    try {
      setIsModalOpen(false);
      setUploadLoading(true);

      setProgress(10);
      setProgressMessage("Initializing submission...");

      const newPrescriptionId = `PRES-${Date.now()}`;
      setPrescriptionId(newPrescriptionId);
        
      const pdfBlob = await generatePrescriptionPDF();
      const uploadResult = await uploadPdf(pdfBlob);


      // First save prescription data to backend
      const prescriptionPayload = {
        prescriptionId: newPrescriptionId,
        doctorId: user?._id,
        patientDetails: {
          name: prescriptionData?.patientName,
          age: prescriptionData?.age,
          sex: prescriptionData?.sex,
          contact: prescriptionData?.contact,
          city: prescriptionData?.city,
        },
        vitals: {
          weight: prescriptionData?.weight,
          height: prescriptionData?.height,
          bmi: prescriptionData?.bmi,
          additionalInfo: prescriptionData?.additionalinfo,
        },
        diagnosis: prescriptionData?.diagnosis,
        investigationTest: prescriptionData?.investigationtest,
        medicines: prescriptionData?.medicines,
        remarks: prescriptionData?.remarks,
        followUp: prescriptionData?.followup,
        pdfUrl: uploadResult,
        createdAt: new Date().toISOString()
      };

      setProgress(20);
      setProgressMessage("Saving prescription data...");
      console.log(prescriptionPayload);
      // API call to save prescription data
      const response = await fetch('http://localhost:5000/api/prescriptions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify(prescriptionPayload)
      });

      if (!response.ok) {
        throw new Error('Failed to save prescription data');
      }

      setProgress(40);
      setProgressMessage("Generating prescription pdf...");

      // Generate and upload PDF
      
      setProgress(60);
      setProgressMessage("Uploading prescription pdf...");
      
      

      if (!uploadResult) {
        throw new Error("PDF upload failed");
      }

      setProgress(80);
      setProgressMessage("Sending email notification...");

      // Send email with prescription link
      const emailResponse = await fetch("https://hm-0023-mle.vercel.app/api/email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          to: "darshangodase10@gmail.com",
          subject: "Your Medical Consultation Report - HealthSetu",
          text: `Dear ${prescriptionData?.patientName || 'Patient'},
    
          We hope this email finds you in good health. Attached is your medical consultation report, which includes details of your diagnosis and prescribed medications.
          
          To download your prescription, please click on the link below:
          
          ${uploadResult}
          
          If you have any questions, feel free to reach out to your doctor.
          
          Best regards,  
          HealthSetu Team`,
        }),
      });

      if (!emailResponse.ok) {
        console.warn("Email sending failed, but prescription was saved");
      }

      setProgress(100);
      setProgressMessage("Submission complete!");
      navigate("/docdashboard");

    } catch (error) {
      console.error("Error submitting prescription:", error);
      toast.error("Failed to submit prescription");
      setUploadLoading(false);
    }
  };

  const handleFormChange = (updatedData) => {
    setPrescriptionData(updatedData);
  };

  return (
    <div className="w-full min-h-screen bg-gradient-to-r from-blue-50 via-white to-blue-50 py-8 font-rubik overflow-x-auto  ">
      <div className="container mx-auto p-4 mt-10">
        {/* Header */}
        <div className="flex justify-left mb-6">
          <button
            onClick={() => navigate("/doctor/dashboard?tab=prescriptions")}
            className="bg-blue-500 text-white p-4 py-2 rounded-lg hover:bg-blue-600 transition flex items-center justify-center gap-1"
          >
            <FaAnglesLeft />
            Dashboard
          </button>
        </div>

        {/* Heading */}
        <h1 className="text-4xl font-extrabold text-center text-blue-600 mb-8 font-poppins">
          Create Prescription
        </h1>

        <div className="flex flex-col md:flex-row gap-6">
          {/* Prescription Form Section */}
          <div className="w-full md:w-1/2 bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-semibold text-blue-500 mb-4">
              Prescription Form
            </h2>
            <PrescriptionForm onChange={handleFormChange} formData={prescriptionData} />
          </div>

          {/* Prescription Preview Section */}
          <div className="w-full md:w-1/2 bg-gray-100 rounded-lg shadow-md p-6 sticky top-8">
            <h2 className="text-2xl font-semibold text-green-500 mb-4">
              Preview
            </h2>
            <PrescriptionPreview
              ref={prescriptionPreviewRef}
              formData={prescriptionData}
              prescriptionId={prescriptionId}
            />
          </div>
        </div>

        {/* Submit Button */}
        <div className="flex justify-center mt-8">
          <button
            onClick={() => setIsModalOpen(true)}
            className="bg-blue-500 text-white p-4 py-2 rounded-lg hover:bg-blue-600 transition flex items-center justify-center"
          >
            Submit Prescription
          </button>
        </div>

        {/* Modal */}
        {isModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-6 ">
            <div className="bg-white rounded-lg p-6 max-w-lg mx-auto w-full ">
              <h2 className="text-xl font-bold mb-4">Confirm Submission</h2>
              <p>Are you sure you want to submit this prescription?</p>
              <div className="flex justify-end gap-4 mt-6">
                <button
                  onClick={() => setIsModalOpen(false)}
                  className="bg-gray-300 text-gray-700 p-2 px-4 rounded-lg hover:bg-gray-400"
                >
                  No
                </button>
                <button
                  onClick={handleSubmit}
                  className={`bg-green-500 text-white p-2 px-4 rounded-lg hover:bg-green-600 ${
                    uploadLoading && "opacity-50 cursor-not-allowed"
                  }`}
                  disabled={uploadLoading}
                >
                  {uploadLoading ? "Submitting..." : "Yes"}
                </button>
              </div>
            </div>
          </div>
        )}

        {uploadLoading && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-6">
            <div className="bg-white rounded-lg p-6 max-w-lg mx-auto w-full m-4">
              <h2 className="text-xl font-bold mb-4">
                Submitting Prescription
              </h2>
              <p className="text-gray-600 mb-4">{progressMessage}</p>
              <div className="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                <div
                  className="bg-blue-500 h-4 transition-all duration-300"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <p className="text-gray-600 mt-4 text-center">
                {progress}% complete
              </p>
            </div>
          </div>
        )}


      </div>
    </div>
  );
};

export default CreatePrescription;

